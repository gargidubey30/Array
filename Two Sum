////////////////////Brute Force (O(n²)):
vector<int> twoSumBrute(vector<int>& nums, int target) {
    for(int i=0;i<nums.size();i++){
        for(int j=i+1;j<nums.size();j++){
            if(nums[i]+nums[j]==target) return {i,j};
        }
    }
    return {};
}


////////////////////////////////Better – Sort + Two Pointers (O(n log n)): (loses indices)


//////////////Optimal – Hashmap (O(n)):
class Solution {
public:
    vector<int> twoSum(vector<int>& nums, int target) {

        int n=nums.size();
        vector<int> ans;
        map<int,int>mp;
        

        for(int i=0; i<n; i++){

            int element = target-nums[i];
           if(mp.find(element)!=mp.end()){
            ans.push_back(mp[element]);
            ans.push_back(i);
            return ans;
           }

           mp[nums[i]]=i;         
               
        }
        return ans;
    }
};
